// <auto-generated />
using System;
using DiscordRepair.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiscordRepair.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Backup", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Userkey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("guildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("guildkey")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("key");

                    b.HasIndex("Userkey");

                    b.HasIndex("guildkey");

                    b.ToTable("Backup");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.CategoryChannel", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("position")
                        .HasColumnType("integer");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("CategoryChannel");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.TextChannel", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<int?>("archiveAfter")
                        .HasColumnType("integer");

                    b.Property<bool>("archived")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("categorykey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("locked")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("nsfw")
                        .HasColumnType("boolean");

                    b.Property<int>("position")
                        .HasColumnType("integer");

                    b.Property<int>("slowModeInterval")
                        .HasColumnType("integer");

                    b.Property<bool>("synced")
                        .HasColumnType("boolean");

                    b.Property<string>("topic")
                        .HasColumnType("text");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("categorykey");

                    b.ToTable("TextChannel");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.VoiceChannel", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<int>("bitrate")
                        .HasColumnType("integer");

                    b.Property<Guid?>("categorykey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("position")
                        .HasColumnType("integer");

                    b.Property<string>("region")
                        .HasColumnType("text");

                    b.Property<bool>("synced")
                        .HasColumnType("boolean");

                    b.Property<int?>("userLimit")
                        .HasColumnType("integer");

                    b.Property<string>("videoQuality")
                        .HasColumnType("text");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("categorykey");

                    b.ToTable("VoiceChannel");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Emoji", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("Emoji");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Guild", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("afkChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("afkTimeout")
                        .HasColumnType("integer");

                    b.Property<string>("bannerUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("defaultChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("defaultMessageNotifications")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("discoverySplashUrl")
                        .HasColumnType("text");

                    b.Property<int>("explicitContentFilterLevel")
                        .HasColumnType("integer");

                    b.Property<string>("guildName")
                        .HasColumnType("text");

                    b.Property<string>("iconUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("isBoostProgressBarEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isWidgetEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("preferredLocale")
                        .HasColumnType("text");

                    b.Property<decimal?>("publicUpdatesChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("rulesChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("splashUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("systemChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("systemChannelMessageDeny")
                        .HasColumnType("integer");

                    b.Property<string>("vanityUrl")
                        .HasColumnType("text");

                    b.Property<int>("verificationLevel")
                        .HasColumnType("integer");

                    b.Property<decimal?>("widgetChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("key");

                    b.ToTable("Guild");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.GuildUser", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<string>("avatarUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("GuildUser");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Message", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("authorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("channelkey")
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("flags")
                        .HasColumnType("integer");

                    b.Property<bool>("isPinned")
                        .HasColumnType("boolean");

                    b.Property<bool>("isSuppressed")
                        .HasColumnType("boolean");

                    b.Property<bool>("isTTS")
                        .HasColumnType("boolean");

                    b.Property<int>("source")
                        .HasColumnType("integer");

                    b.Property<decimal?>("threadChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("channelkey");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Permissions.ChannelPermissions", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AddReactions")
                        .HasColumnType("integer");

                    b.Property<int>("AttachFiles")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CategoryChannelkey")
                        .HasColumnType("uuid");

                    b.Property<int>("Connect")
                        .HasColumnType("integer");

                    b.Property<int>("CreateInstantInvite")
                        .HasColumnType("integer");

                    b.Property<int>("CreatePrivateThreads")
                        .HasColumnType("integer");

                    b.Property<int>("CreatePublicThreads")
                        .HasColumnType("integer");

                    b.Property<int>("DeafenMembers")
                        .HasColumnType("integer");

                    b.Property<int>("EmbedLinks")
                        .HasColumnType("integer");

                    b.Property<int>("ManageChannel")
                        .HasColumnType("integer");

                    b.Property<int>("ManageMessages")
                        .HasColumnType("integer");

                    b.Property<int>("ManageRoles")
                        .HasColumnType("integer");

                    b.Property<int>("ManageThreads")
                        .HasColumnType("integer");

                    b.Property<int>("ManageWebhooks")
                        .HasColumnType("integer");

                    b.Property<int>("MentionEveryone")
                        .HasColumnType("integer");

                    b.Property<int>("MoveMembers")
                        .HasColumnType("integer");

                    b.Property<int>("MuteMembers")
                        .HasColumnType("integer");

                    b.Property<int>("PrioritySpeaker")
                        .HasColumnType("integer");

                    b.Property<int>("ReadMessageHistory")
                        .HasColumnType("integer");

                    b.Property<int>("RequestToSpeak")
                        .HasColumnType("integer");

                    b.Property<int>("SendMessages")
                        .HasColumnType("integer");

                    b.Property<int>("SendMessagesInThreads")
                        .HasColumnType("integer");

                    b.Property<int>("SendTTSMessages")
                        .HasColumnType("integer");

                    b.Property<int>("Speak")
                        .HasColumnType("integer");

                    b.Property<int>("StartEmbeddedActivities")
                        .HasColumnType("integer");

                    b.Property<int>("Stream")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TextChannelkey")
                        .HasColumnType("uuid");

                    b.Property<int>("UseApplicationCommands")
                        .HasColumnType("integer");

                    b.Property<int>("UseExternalEmojis")
                        .HasColumnType("integer");

                    b.Property<int>("UseExternalStickers")
                        .HasColumnType("integer");

                    b.Property<int>("UseVAD")
                        .HasColumnType("integer");

                    b.Property<int>("ViewChannel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("VoiceChannelkey")
                        .HasColumnType("uuid");

                    b.Property<int>("permissionTarget")
                        .HasColumnType("integer");

                    b.Property<decimal>("targetId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("usePrivateThreads")
                        .HasColumnType("integer");

                    b.Property<int>("useSlashCommands")
                        .HasColumnType("integer");

                    b.Property<int>("useVoiceActivation")
                        .HasColumnType("integer");

                    b.HasKey("key");

                    b.HasIndex("CategoryChannelkey");

                    b.HasIndex("TextChannelkey");

                    b.HasIndex("VoiceChannelkey");

                    b.ToTable("ChannelPermissions");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Permissions.RolePermissions", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AddReactions")
                        .HasColumnType("boolean");

                    b.Property<bool>("Administrator")
                        .HasColumnType("boolean");

                    b.Property<bool>("AttachFiles")
                        .HasColumnType("boolean");

                    b.Property<bool>("BanMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ChangeNickname")
                        .HasColumnType("boolean");

                    b.Property<bool>("Connect")
                        .HasColumnType("boolean");

                    b.Property<bool>("CreateInstantInvite")
                        .HasColumnType("boolean");

                    b.Property<bool>("CreatePrivateThreads")
                        .HasColumnType("boolean");

                    b.Property<bool>("CreatePublicThreads")
                        .HasColumnType("boolean");

                    b.Property<bool>("DeafenMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("EmbedLinks")
                        .HasColumnType("boolean");

                    b.Property<bool>("KickMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageChannels")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageEmojisAndStickers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageEvents")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageGuild")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageMessages")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageNicknames")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageThreads")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageWebhooks")
                        .HasColumnType("boolean");

                    b.Property<bool>("MentionEveryone")
                        .HasColumnType("boolean");

                    b.Property<bool>("MoveMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("MuteMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrioritySpeaker")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReadMessageHistory")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequestToSpeak")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendMessages")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendMessagesInThreads")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendTTSMessages")
                        .HasColumnType("boolean");

                    b.Property<bool>("Speak")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartEmbeddedActivities")
                        .HasColumnType("boolean");

                    b.Property<bool>("Stream")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseApplicationCommands")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseExternalEmojis")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseExternalStickers")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseVAD")
                        .HasColumnType("boolean");

                    b.Property<bool>("ViewAuditLog")
                        .HasColumnType("boolean");

                    b.Property<bool>("ViewChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("ViewGuildInsights")
                        .HasColumnType("boolean");

                    b.Property<bool>("moderateMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("useVoiceActivation")
                        .HasColumnType("boolean");

                    b.HasKey("key");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Role", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuildUserkey")
                        .HasColumnType("uuid");

                    b.Property<long>("color")
                        .HasColumnType("bigint");

                    b.Property<string>("icon")
                        .HasColumnType("text");

                    b.Property<decimal>("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("isEveryone")
                        .HasColumnType("boolean");

                    b.Property<bool>("isHoisted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isManaged")
                        .HasColumnType("boolean");

                    b.Property<bool>("isMentionable")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<Guid>("permissionskey")
                        .HasColumnType("uuid");

                    b.Property<int>("position")
                        .HasColumnType("integer");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("GuildUserkey");

                    b.HasIndex("permissionskey");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Sticker", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Backupkey")
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("format")
                        .HasColumnType("integer");

                    b.Property<bool?>("isAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("packId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("sortOrder")
                        .HasColumnType("integer");

                    b.Property<string[]>("tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("Sticker");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Blacklist", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServerSettingskey")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Userkey")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("discordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ip")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("key");

                    b.HasIndex("ServerSettingskey");

                    b.HasIndex("Userkey");

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.CustomBot", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Userkey")
                        .HasColumnType("uuid");

                    b.Property<int>("botType")
                        .HasColumnType("integer");

                    b.Property<string>("clientId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("clientSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("key");

                    b.HasIndex("Userkey");

                    b.ToTable("CustomBot");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.LogModels.Errors", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("errorTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("extraInfo")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("message")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("stackTrace")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("key");

                    b.ToTable("errors");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Member", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("accessToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("avatar")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("botUsedkey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("discordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ip")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("linkDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("serverkey")
                        .HasColumnType("uuid");

                    b.Property<string>("username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("key");

                    b.HasIndex("botUsedkey");

                    b.HasIndex("serverkey");

                    b.ToTable("members");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Migration", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("alreadyMigratedMemberAmount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("botkey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("completionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("extraDetails")
                        .HasColumnType("text");

                    b.Property<decimal>("failedMemberAmount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("invalidTokenAmount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("newGuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("newRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("serverkey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<decimal>("successfulMemberAmount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("totalMemberAmount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("userkey")
                        .HasColumnType("uuid");

                    b.HasKey("key");

                    b.HasIndex("botkey");

                    b.HasIndex("serverkey");

                    b.HasIndex("userkey");

                    b.ToTable("migrations");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Server", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("banned")
                        .HasColumnType("boolean");

                    b.Property<decimal>("guildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ownerkey")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("roleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("settingskey")
                        .HasColumnType("uuid");

                    b.HasKey("key");

                    b.HasIndex("ownerkey");

                    b.HasIndex("settingskey");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.ServerSettings", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("backgroundImage")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("captcha")
                        .HasColumnType("boolean");

                    b.Property<Guid>("mainBotkey")
                        .HasColumnType("uuid");

                    b.Property<string>("pic")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("redirectUrl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("vanityUrl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("verifyEmbedSettingskey")
                        .HasColumnType("uuid");

                    b.Property<bool>("vpnCheck")
                        .HasColumnType("boolean");

                    b.Property<string>("webhook")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("webhookLogType")
                        .HasColumnType("integer");

                    b.HasKey("key");

                    b.HasIndex("mainBotkey");

                    b.HasIndex("verifyEmbedSettingskey");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.SuccessVerifyEmbedSettings", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("authorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("footerIconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("footerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("geoData")
                        .HasColumnType("boolean");

                    b.Property<string>("iconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("key");

                    b.ToTable("SuccessVerifyEmbedSettings");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.User", b =>
                {
                    b.Property<Guid>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("accountType")
                        .HasColumnType("integer");

                    b.Property<string>("apiToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("banned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("discordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("expiry")
                        .HasColumnType("date");

                    b.Property<string>("lastIP")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pfp")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("key");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Backup", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.User", null)
                        .WithMany("backups")
                        .HasForeignKey("Userkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Guild", "guild")
                        .WithMany()
                        .HasForeignKey("guildkey");

                    b.Navigation("guild");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.CategoryChannel", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("catgeoryChannels")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.TextChannel", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("textChannels")
                        .HasForeignKey("Backupkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Channel.CategoryChannel", "category")
                        .WithMany()
                        .HasForeignKey("categorykey");

                    b.Navigation("category");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.VoiceChannel", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("voiceChannels")
                        .HasForeignKey("Backupkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Channel.CategoryChannel", "category")
                        .WithMany()
                        .HasForeignKey("categorykey");

                    b.Navigation("category");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Emoji", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("emojis")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.GuildUser", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("users")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Message", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("messages")
                        .HasForeignKey("Backupkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Channel.TextChannel", "channel")
                        .WithMany()
                        .HasForeignKey("channelkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("channel");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Permissions.ChannelPermissions", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Channel.CategoryChannel", null)
                        .WithMany("permissions")
                        .HasForeignKey("CategoryChannelkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Channel.TextChannel", null)
                        .WithMany("permissions")
                        .HasForeignKey("TextChannelkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Channel.VoiceChannel", null)
                        .WithMany("permissions")
                        .HasForeignKey("VoiceChannelkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Role", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("roles")
                        .HasForeignKey("Backupkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.GuildUser", null)
                        .WithMany("assignedRoles")
                        .HasForeignKey("GuildUserkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Permissions.RolePermissions", "permissions")
                        .WithMany()
                        .HasForeignKey("permissionskey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permissions");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Sticker", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.BackupModels.Backup", null)
                        .WithMany("stickers")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Blacklist", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.ServerSettings", null)
                        .WithMany("blacklist")
                        .HasForeignKey("ServerSettingskey");

                    b.HasOne("DiscordRepair.Api.Database.Models.User", null)
                        .WithMany("globalBlacklist")
                        .HasForeignKey("Userkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.CustomBot", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.User", null)
                        .WithMany("bots")
                        .HasForeignKey("Userkey");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Member", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.CustomBot", "botUsed")
                        .WithMany()
                        .HasForeignKey("botUsedkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordRepair.Api.Database.Models.Server", "server")
                        .WithMany()
                        .HasForeignKey("serverkey");

                    b.Navigation("botUsed");

                    b.Navigation("server");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Migration", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.CustomBot", "bot")
                        .WithMany()
                        .HasForeignKey("botkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.Server", "server")
                        .WithMany()
                        .HasForeignKey("serverkey");

                    b.HasOne("DiscordRepair.Api.Database.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userkey");

                    b.Navigation("bot");

                    b.Navigation("server");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.Server", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.User", "owner")
                        .WithMany()
                        .HasForeignKey("ownerkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordRepair.Api.Database.Models.ServerSettings", "settings")
                        .WithMany()
                        .HasForeignKey("settingskey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");

                    b.Navigation("settings");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.ServerSettings", b =>
                {
                    b.HasOne("DiscordRepair.Api.Database.Models.CustomBot", "mainBot")
                        .WithMany()
                        .HasForeignKey("mainBotkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordRepair.Api.Database.Models.SuccessVerifyEmbedSettings", "verifyEmbedSettings")
                        .WithMany()
                        .HasForeignKey("verifyEmbedSettingskey");

                    b.Navigation("mainBot");

                    b.Navigation("verifyEmbedSettings");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Backup", b =>
                {
                    b.Navigation("catgeoryChannels");

                    b.Navigation("emojis");

                    b.Navigation("messages");

                    b.Navigation("roles");

                    b.Navigation("stickers");

                    b.Navigation("textChannels");

                    b.Navigation("users");

                    b.Navigation("voiceChannels");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.CategoryChannel", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.TextChannel", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.Channel.VoiceChannel", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.BackupModels.GuildUser", b =>
                {
                    b.Navigation("assignedRoles");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.ServerSettings", b =>
                {
                    b.Navigation("blacklist");
                });

            modelBuilder.Entity("DiscordRepair.Api.Database.Models.User", b =>
                {
                    b.Navigation("backups");

                    b.Navigation("bots");

                    b.Navigation("globalBlacklist");
                });
#pragma warning restore 612, 618
        }
    }
}
