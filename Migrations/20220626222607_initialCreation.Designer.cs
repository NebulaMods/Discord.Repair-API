// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestoreCord.Database;

#nullable disable

namespace RestoreCord.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220626222607_initialCreation")]
    partial class initialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Backup", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Userkey")
                        .HasColumnType("int");

                    b.Property<int?>("afkChannelkey")
                        .HasColumnType("int");

                    b.Property<int?>("afkTimeout")
                        .HasColumnType("int");

                    b.Property<string>("bannerUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("defaultChannelkey")
                        .HasColumnType("int");

                    b.Property<int>("defaultMessageNotifications")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("discoverySplashUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("explicitContentFilterLevel")
                        .HasColumnType("int");

                    b.Property<string>("guildName")
                        .HasColumnType("longtext");

                    b.Property<string>("iconUrl")
                        .HasColumnType("longtext");

                    b.Property<bool?>("isBoostProgressBarEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("isWidgetEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("preferredLocale")
                        .HasColumnType("longtext");

                    b.Property<int?>("publicUpdatesChannelkey")
                        .HasColumnType("int");

                    b.Property<int?>("rulesChannelkey")
                        .HasColumnType("int");

                    b.Property<string>("splashUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("systemChannelMessageDeny")
                        .HasColumnType("int");

                    b.Property<int?>("systemChannelkey")
                        .HasColumnType("int");

                    b.Property<string>("vanityUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("verificationLevel")
                        .HasColumnType("int");

                    b.Property<int?>("widgetChannelkey")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("Userkey");

                    b.HasIndex("afkChannelkey");

                    b.HasIndex("defaultChannelkey");

                    b.HasIndex("publicUpdatesChannelkey");

                    b.HasIndex("rulesChannelkey");

                    b.HasIndex("systemChannelkey");

                    b.HasIndex("widgetChannelkey");

                    b.ToTable("Backup");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.CategoryChannel", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Backupkey")
                        .HasColumnType("int");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("CategoryChannel");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Backupkey")
                        .HasColumnType("int");

                    b.Property<int?>("archiveAfter")
                        .HasColumnType("int");

                    b.Property<bool>("archived")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("categorykey")
                        .HasColumnType("int");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("locked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<bool>("nsfw")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<int>("slowModeInterval")
                        .HasColumnType("int");

                    b.Property<bool>("synced")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("topic")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("categorykey");

                    b.ToTable("TextChannel");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.VoiceChannel", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Backupkey")
                        .HasColumnType("int");

                    b.Property<int>("bitrate")
                        .HasColumnType("int");

                    b.Property<int?>("categorykey")
                        .HasColumnType("int");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("region")
                        .HasColumnType("longtext");

                    b.Property<bool>("synced")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("userLimit")
                        .HasColumnType("int");

                    b.Property<string>("videoQuality")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("categorykey");

                    b.ToTable("VoiceChannel");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Emoji", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Backupkey")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("url")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("Emoji");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.GuildUser", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Backupkey")
                        .HasColumnType("int");

                    b.Property<string>("avatarUrl")
                        .HasColumnType("longtext");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.ToTable("GuildUser");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.GuildUserRole", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GuildUserkey")
                        .HasColumnType("int");

                    b.Property<int>("rolekey")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("GuildUserkey");

                    b.HasIndex("rolekey");

                    b.ToTable("GuildUserRole");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Message", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("TextChannelkey")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("longtext");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<ulong>("userId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("userPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("TextChannelkey");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Permissions.ChannelPermissions", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddReactions")
                        .HasColumnType("int");

                    b.Property<int>("AttachFiles")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryChannelkey")
                        .HasColumnType("int");

                    b.Property<int>("Connect")
                        .HasColumnType("int");

                    b.Property<int>("CreateInstantInvite")
                        .HasColumnType("int");

                    b.Property<int>("CreatePrivateThreads")
                        .HasColumnType("int");

                    b.Property<int>("CreatePublicThreads")
                        .HasColumnType("int");

                    b.Property<int>("DeafenMembers")
                        .HasColumnType("int");

                    b.Property<int>("EmbedLinks")
                        .HasColumnType("int");

                    b.Property<int>("ManageChannel")
                        .HasColumnType("int");

                    b.Property<int>("ManageMessages")
                        .HasColumnType("int");

                    b.Property<int>("ManageRoles")
                        .HasColumnType("int");

                    b.Property<int>("ManageThreads")
                        .HasColumnType("int");

                    b.Property<int>("ManageWebhooks")
                        .HasColumnType("int");

                    b.Property<int>("MentionEveryone")
                        .HasColumnType("int");

                    b.Property<int>("MoveMembers")
                        .HasColumnType("int");

                    b.Property<int>("MuteMembers")
                        .HasColumnType("int");

                    b.Property<int>("PrioritySpeaker")
                        .HasColumnType("int");

                    b.Property<int>("ReadMessageHistory")
                        .HasColumnType("int");

                    b.Property<int>("RequestToSpeak")
                        .HasColumnType("int");

                    b.Property<int>("SendMessages")
                        .HasColumnType("int");

                    b.Property<int>("SendMessagesInThreads")
                        .HasColumnType("int");

                    b.Property<int>("SendTTSMessages")
                        .HasColumnType("int");

                    b.Property<int>("Speak")
                        .HasColumnType("int");

                    b.Property<int>("StartEmbeddedActivities")
                        .HasColumnType("int");

                    b.Property<int>("Stream")
                        .HasColumnType("int");

                    b.Property<int?>("TextChannelkey")
                        .HasColumnType("int");

                    b.Property<int>("UseApplicationCommands")
                        .HasColumnType("int");

                    b.Property<int>("UseExternalEmojis")
                        .HasColumnType("int");

                    b.Property<int>("UseExternalStickers")
                        .HasColumnType("int");

                    b.Property<int>("UseVAD")
                        .HasColumnType("int");

                    b.Property<int>("ViewChannel")
                        .HasColumnType("int");

                    b.Property<int?>("VoiceChannelkey")
                        .HasColumnType("int");

                    b.Property<int>("permissionTarget")
                        .HasColumnType("int");

                    b.Property<ulong>("targetId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("usePrivateThreads")
                        .HasColumnType("int");

                    b.Property<int>("useSlashCommands")
                        .HasColumnType("int");

                    b.Property<int>("useVoiceActivation")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("CategoryChannelkey");

                    b.HasIndex("TextChannelkey");

                    b.HasIndex("VoiceChannelkey");

                    b.ToTable("ChannelPermissions");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Permissions.RolePermissions", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AddReactions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Administrator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AttachFiles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("BanMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ChangeNickname")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Connect")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CreateInstantInvite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CreatePrivateThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CreatePublicThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DeafenMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EmbedLinks")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("KickMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageChannels")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageEmojisAndStickers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageEvents")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageGuild")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageNicknames")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageRoles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageWebhooks")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MentionEveryone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MoveMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MuteMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PrioritySpeaker")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReadMessageHistory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequestToSpeak")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendMessagesInThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendTTSMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Speak")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("StartEmbeddedActivities")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Stream")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseApplicationCommands")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseExternalEmojis")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseExternalStickers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseVAD")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ViewAuditLog")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ViewChannel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ViewGuildInsights")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("moderateMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("useVoiceActivation")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("key");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Role", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Backupkey")
                        .HasColumnType("int");

                    b.Property<uint>("color")
                        .HasColumnType("int unsigned");

                    b.Property<string>("icon")
                        .HasColumnType("longtext");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("isEveryone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isHoisted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isManaged")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isMentionable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("permissionskey")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("Backupkey");

                    b.HasIndex("permissionskey");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Blacklist", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ServerSettingskey")
                        .HasColumnType("int");

                    b.Property<ulong?>("discordId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ip")
                        .HasColumnType("longtext");

                    b.Property<string>("reason")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("ServerSettingskey");

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.CustomBot", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Userkey")
                        .HasColumnType("int");

                    b.Property<int>("botType")
                        .HasColumnType("int");

                    b.Property<string>("clientId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("clientSecret")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("urlRedirect")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("Userkey");

                    b.ToTable("CustomBot");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.LogModels.Errors", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("errorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("extraInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("location")
                        .HasColumnType("longtext");

                    b.Property<string>("message")
                        .HasColumnType("longtext");

                    b.Property<string>("stackTrace")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("errors");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.LogModels.Statistics", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MigratedBykey")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("guildId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int?>("guildStatskey")
                        .HasColumnType("int");

                    b.Property<int?>("memberStatskey")
                        .HasColumnType("int");

                    b.Property<int>("serverkey")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("key");

                    b.HasIndex("MigratedBykey");

                    b.HasIndex("guildStatskey");

                    b.HasIndex("memberStatskey");

                    b.HasIndex("serverkey");

                    b.ToTable("statistics");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Member", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("accessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("avatar")
                        .HasColumnType("longtext");

                    b.Property<int?>("botUsedkey")
                        .HasColumnType("int");

                    b.Property<ulong?>("creationDate")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("discordId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("guildId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ip")
                        .HasColumnType("longtext");

                    b.Property<string>("refreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("botUsedkey");

                    b.ToTable("members");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Server", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("banned")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("guildId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ownerkey")
                        .HasColumnType("int");

                    b.Property<ulong?>("roleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("settingskey")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("ownerkey");

                    b.HasIndex("settingskey");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.ServerSettings", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("autoBlacklist")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("autoJoin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("autoKickUnVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("autoKickUnVerifiedTime")
                        .HasColumnType("int");

                    b.Property<string>("backgroundImage")
                        .HasColumnType("longtext");

                    b.Property<bool>("dmOnAutoKick")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("mainBotkey")
                        .HasColumnType("int");

                    b.Property<string>("pic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("redirectTime")
                        .HasColumnType("int");

                    b.Property<string>("redirectUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("vanityUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("verifyDescription")
                        .HasColumnType("longtext");

                    b.Property<bool>("vpnCheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("webhook")
                        .HasColumnType("longtext");

                    b.Property<int>("webhookLogType")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("mainBotkey");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Statistics.GuildMigration", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("totalTime")
                        .HasColumnType("time(6)");

                    b.HasKey("key");

                    b.ToTable("GuildMigration");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Statistics.MemberMigration", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("alreadyHereCount")
                        .HasColumnType("int");

                    b.Property<int>("bannedCount")
                        .HasColumnType("int");

                    b.Property<int>("blacklistedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("estimatedCompletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("failedCount")
                        .HasColumnType("int");

                    b.Property<int>("invalidTokenCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("successCount")
                        .HasColumnType("int");

                    b.Property<int>("tooManyGuildsCount")
                        .HasColumnType("int");

                    b.Property<int>("totalCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("totalTime")
                        .HasColumnType("time(6)");

                    b.HasKey("key");

                    b.ToTable("MemberMigration");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.User", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("apiToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("banned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("darkmode")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("discordId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("googleAuthCode")
                        .HasColumnType("longtext");

                    b.Property<string>("lastIP")
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("pfp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.ToTable("users");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Backup", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.User", null)
                        .WithMany("backups")
                        .HasForeignKey("Userkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.VoiceChannel", "afkChannel")
                        .WithMany()
                        .HasForeignKey("afkChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", "defaultChannel")
                        .WithMany()
                        .HasForeignKey("defaultChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", "publicUpdatesChannel")
                        .WithMany()
                        .HasForeignKey("publicUpdatesChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", "rulesChannel")
                        .WithMany()
                        .HasForeignKey("rulesChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", "systemChannel")
                        .WithMany()
                        .HasForeignKey("systemChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", "widgetChannel")
                        .WithMany()
                        .HasForeignKey("widgetChannelkey");

                    b.Navigation("afkChannel");

                    b.Navigation("defaultChannel");

                    b.Navigation("publicUpdatesChannel");

                    b.Navigation("rulesChannel");

                    b.Navigation("systemChannel");

                    b.Navigation("widgetChannel");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.CategoryChannel", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Backup", null)
                        .WithMany("catgeoryChannels")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Backup", null)
                        .WithMany("textChannels")
                        .HasForeignKey("Backupkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.CategoryChannel", "category")
                        .WithMany()
                        .HasForeignKey("categorykey");

                    b.Navigation("category");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.VoiceChannel", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Backup", null)
                        .WithMany("voiceChannels")
                        .HasForeignKey("Backupkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.CategoryChannel", "category")
                        .WithMany()
                        .HasForeignKey("categorykey");

                    b.Navigation("category");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Emoji", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Backup", null)
                        .WithMany("emojis")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.GuildUser", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Backup", null)
                        .WithMany("users")
                        .HasForeignKey("Backupkey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.GuildUserRole", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.GuildUser", null)
                        .WithMany("assignedRoles")
                        .HasForeignKey("GuildUserkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Role", "role")
                        .WithMany()
                        .HasForeignKey("rolekey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Message", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", null)
                        .WithMany("messages")
                        .HasForeignKey("TextChannelkey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Permissions.ChannelPermissions", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.CategoryChannel", null)
                        .WithMany("permissions")
                        .HasForeignKey("CategoryChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", null)
                        .WithMany("permissions")
                        .HasForeignKey("TextChannelkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Channel.VoiceChannel", null)
                        .WithMany("permissions")
                        .HasForeignKey("VoiceChannelkey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Role", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.BackupModels.Backup", null)
                        .WithMany("roles")
                        .HasForeignKey("Backupkey");

                    b.HasOne("RestoreCord.Database.Models.BackupModels.Permissions.RolePermissions", "permissions")
                        .WithMany()
                        .HasForeignKey("permissionskey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permissions");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Blacklist", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.ServerSettings", null)
                        .WithMany("blacklist")
                        .HasForeignKey("ServerSettingskey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.CustomBot", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.User", null)
                        .WithMany("bots")
                        .HasForeignKey("Userkey");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.LogModels.Statistics", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.User", "MigratedBy")
                        .WithMany()
                        .HasForeignKey("MigratedBykey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestoreCord.Database.Models.Statistics.GuildMigration", "guildStats")
                        .WithMany()
                        .HasForeignKey("guildStatskey");

                    b.HasOne("RestoreCord.Database.Models.Statistics.MemberMigration", "memberStats")
                        .WithMany()
                        .HasForeignKey("memberStatskey");

                    b.HasOne("RestoreCord.Database.Models.Server", "server")
                        .WithMany()
                        .HasForeignKey("serverkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MigratedBy");

                    b.Navigation("guildStats");

                    b.Navigation("memberStats");

                    b.Navigation("server");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Member", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.CustomBot", "botUsed")
                        .WithMany()
                        .HasForeignKey("botUsedkey");

                    b.Navigation("botUsed");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.Server", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.User", "owner")
                        .WithMany()
                        .HasForeignKey("ownerkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestoreCord.Database.Models.ServerSettings", "settings")
                        .WithMany()
                        .HasForeignKey("settingskey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");

                    b.Navigation("settings");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.ServerSettings", b =>
                {
                    b.HasOne("RestoreCord.Database.Models.CustomBot", "mainBot")
                        .WithMany()
                        .HasForeignKey("mainBotkey");

                    b.Navigation("mainBot");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Backup", b =>
                {
                    b.Navigation("catgeoryChannels");

                    b.Navigation("emojis");

                    b.Navigation("roles");

                    b.Navigation("textChannels");

                    b.Navigation("users");

                    b.Navigation("voiceChannels");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.CategoryChannel", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.TextChannel", b =>
                {
                    b.Navigation("messages");

                    b.Navigation("permissions");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.Channel.VoiceChannel", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.BackupModels.GuildUser", b =>
                {
                    b.Navigation("assignedRoles");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.ServerSettings", b =>
                {
                    b.Navigation("blacklist");
                });

            modelBuilder.Entity("RestoreCord.Database.Models.User", b =>
                {
                    b.Navigation("backups");

                    b.Navigation("bots");
                });
#pragma warning restore 612, 618
        }
    }
}
